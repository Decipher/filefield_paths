<?php
// $Id$

/**
 * @file
 * Adds extra functionality to FileFields Path settings.
 */

/**
 * Implementation of hook_form_alter().
 */
function filefield_paths_form_alter(&$form, $form_state, $form_id) {
  if ($form['widget_module']['#value'] == 'filefield') {
    unset($form['widget']['path_settings']['file_path']['#suffix']);

    $form['widget']['path_settings']['file_path_tolower'] = array(
      '#type' => 'checkbox',
      '#title' => 'Convert to lower case.',
      '#default_value' => variable_get(
        'filefield_paths_'. $form['type_name']['#value'] .'_'. $form['field_name']['#value'] .'_filepath_tolower',
        0
      )
    );

    $form['widget']['path_settings']['file_path_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => 'File path replacement patterns',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => theme('token_help', 'node')
    );

    $form['widget']['path_settings']['file_name'] = array(
      '#type' => 'textfield',
      '#title' => 'File name',
      '#default_value' => variable_get(
        'filefield_paths_'. $form['type_name']['#value'] .'_'. $form['field_name']['#value'] .'_filename',
        '[filefield_paths-name].[filefield_paths-ext]'
      )
    );

    $form['widget']['path_settings']['file_name_tolower'] = array(
      '#type' => 'checkbox',
      '#title' => 'Convert to lower case.',
      '#default_value' => variable_get(
        'filefield_paths_'. $form['type_name']['#value'] .'_'. $form['field_name']['#value'] .'_filename_tolower',
        0
      )
    );

    $form['widget']['path_settings']['file_name_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => 'File name replacement patterns',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => theme('token_help', 'field') . theme('token_help', 'node')
    );

    $form['#submit'][] = 'filefield_paths_form_submit';
  }
}

/**
 * Implementation of hook_form_submit().
 */
function filefield_paths_form_submit($form, &$form_state) {
  variable_set(
    'filefield_paths_'. $form['type_name']['#value'] .'_'. $form['field_name']['#value'] .'_filepath_tolower',
    $form_state['values']['file_path_tolower']
  );

  variable_set(
    'filefield_paths_'. $form['type_name']['#value'] .'_'. $form['field_name']['#value'] .'_filename',
    $form_state['values']['file_name']
  );

  variable_set(
    'filefield_paths_'. $form['type_name']['#value'] .'_'. $form['field_name']['#value'] .'_filename_tolower',
    $form_state['values']['file_name_tolower']
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function filefield_paths_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      $content_type = content_types($node->type);
      $update = FALSE;

      foreach ($content_type['fields'] as $field) {
        if ($field['type'] == 'filefield') {

          foreach ($node->$field['field_name'] as $count => $file) {
            $dest = token_replace($file['filepath'], 'node', $node);

            if (variable_get('filefield_paths_'. $node->type .'_'. $field['field_name'] .'_filepath_tolower', 0) == 1) {
              $dest = drupal_strtolower($dest);
            }

            $file_rename = FALSE;
            $filename = variable_get('filefield_paths_'. $node->type .'_'. $field['field_name'] .'_filename', '');

            if (!empty($filename)) {
              $filename = token_replace(token_replace($filename, 'node', $node), 'field', $file);

              if (variable_get('filefield_paths_'. $node->type .'_'. $field['field_name'] .'_filename_tolower', 0) == 1) {
                $filename = drupal_strtolower($filename);
              }

              if ($file['filename'] != $filename) {
                $file['filename'] = $filename;
                $file_rename = TRUE;
              }
            }

            // Move file if it hasn't already been processed
            if ($dest != $file['filepath'] || $file_rename) {
              $body = urldecode(preg_replace('/'. urlencode($file['filepath']) .'/', urlencode($dest), urlencode(urldecode($node->body))));
              $teaser = urldecode(preg_replace('/'. urlencode($file['filepath']) .'/', urlencode($dest), urlencode(urldecode($node->teaser))));

              if ($body != $node->body || $teaser != $node->teaser) {
                $node->body = $body;
                $node->teaser = $teaser;

                $update = TRUE;
              }

              filefield_paths_file_move($file, drupal_substr($dest, 0, strrpos($dest, '/')));
            }
          }

          // Cleanup temporary paths
          $paths = explode('/', $field['widget']['file_path']);
          $depth = sizeof($paths);

          for ($count = 0; $count < $depth; $count++) {
            if (sizeof(file_scan_directory(file_directory_path() .'/'. implode('/', $paths), '.*')) == 0) {
              // Directory is empty, delete it.
              @rmdir(file_directory_path() .'/'. implode('/', $paths));

              array_pop($paths);
            }
            else {
              // Directory is not empty, don't delete it.
              break;
            }
          }

        }
      }

      if ($update == TRUE) {
        drupal_write_record('node', $node, 'nid');
        if (!empty($node->revision)) {
          _node_save_revision($node, $user->uid);
          db_query('UPDATE {node} SET vid = %d WHERE nid = %d', $node->vid, $node->nid);
        }
        else {
          _node_save_revision($node, $user->uid, 'vid');
          $update_node = FALSE;
        }
      }

      break;
  }
}

/**
 * Implementation of hook_token_list():
 * Provide a user readable list of filefield tokens.
 */
function filefield_paths_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();
    $tokens['file']['filefield_paths-name']   = t("File name");
    $tokens['file']['filefield_paths-ext']    = t("File extension");
    return $tokens;
  }
}

/**
 * Implementation of hook_token_values():
 * Provide the concrete token values for a given file item.
 */
function filefield_paths_token_values($type, $object = NULL) {
  if ($type == 'field') {
    $tokens['filefield_paths-name']           = drupal_substr($object['filename'], 0, strrpos($object['filename'], '.'));
    $tokens['filefield_paths-ext']            = drupal_substr($object['filename'], strrpos($object['filename'], '.') + 1);
    return $tokens;
  }
}

/**
 * Move file and update its database record.
 */
function filefield_paths_file_move($source, $dest, $replace = FILE_EXISTS_RENAME) {
  $dest = field_file_strip_path($dest);

  foreach (explode('/', $dest) as $dir) {
    $dirs[] = $dir;
    $path = file_create_path(implode($dirs, '/'));
    if (!field_file_check_directory($path, FILE_CREATE_DIRECTORY, $form_item)) {
      watchdog('filefield_paths', t('FileField Paths failed to create directory (%d).', array('%d' => $path)), WATCHDOG_ERROR);
      return FALSE;
    }
  }

  if (!file_move($source['filepath'], $dest .'/'. $source['filename'], $replace)) {
    watchdog('filefield_paths', t('FileField Paths failed to move file (%o) to (%n).', array('%o' => $source_date['filepath'], '%n' => $dest .'/'. $source_date['filename'])), WATCHDOG_ERROR);
    return FALSE;
  }

  db_query('UPDATE {files} SET filename = "%s", filepath = "%s" WHERE fid = %d', $source['filename'], $source['filepath'], $source['fid']);

  return TRUE;
}
