<?php
// $Id$

/**
 * @file
 * Adds extra functionality to FileFields Path settings.
 */

/**
 * Implementation of hook_filefield_paths_field().
 */
function filefield_paths_filefield_paths_field_settings() {
  return array(
    'file_path' => array(
      'title' => 'File path',
      'sql' => 'filepath',
    ),

    'file_name' => array(
      'title' => 'File name',
      'sql' => 'filename',

      'form' => array(
        'file_name' => array(
          '#type' => 'textfield',
          '#title' => t('File name'),
          '#default_value' => '[filefield_paths-name].[filefield_paths-ext]',
        )
      ),
    )
  );
}

/**
 * Implementation of hook_form_alter().
 */
function filefield_paths_form_alter(&$form, $form_state, $form_id) {

  // Set variables for FileField.module
  if (isset($form['basic']) && preg_match('/\bfilefield\b|\bimage\b/', $form['basic']['type']['#value']) && isset($form['widget']['path_settings'])) {
    $ffp = array(
      'show' => TRUE,
      'type' => $form['type_name']['#value'],
      'name' => $form['field_name']['#value'],
      'form_path' => &$form['widget']['path_settings'],
      'file_path_default' => $form['widget']['path_settings']['file_path']['#default_value']
    );

    unset($form['widget']['path_settings']['file_path']['#suffix']);
  }

  // Set variables for Upload.module
  elseif (module_exists('upload') && isset($form['#id']) && $form['#id'] == 'node-type-form') {
    $ffp = array(
      'show' => TRUE,
      'type' => $form['#node_type']->type,
      'name' => 'upload',
      'form_path' => &$form['workflow']['path_settings'],
      'file_path_default' => ''
    );

    // Create path settings fieldset
    $ffp['form_path'] = array(
      '#type' => 'fieldset',
      '#title' => t('Path settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE
    );

    $ffp['form_path']['file_path'] = array(
      '#type' => 'textfield',
      '#title' => t('File path'),
      '#description' => t('Optional subdirectory within the "%dir" directory where files will be stored. Do not include trailing slash.', array('%dir' => variable_get('file_directory_path', 'files')))
    );
  }

  if (isset($ffp['show']) && $ffp['show'] == TRUE) {
    $fields = module_invoke_all('filefield_paths_field_settings');

    $result = db_fetch_object(
      db_query("SELECT * FROM {filefield_paths} WHERE type = '%s' AND field = '%s'", $ffp['type'], $ffp['name'])
    );
    if (!empty($result)) {
      foreach ($fields as &$field) {
        $field['settings'] = unserialize($result->$field['sql']);
      }
      unset($field);
    }

    $count = 0;
    foreach ($fields as $name => $field) {
      $count++;

      if (isset($field['form']) && is_array($field['form'])) {
        $keys = array_keys($field['form']);
        for ($i = 1; $i < count($field['form']); $i++) {
          $field['form'][$keys[$i]]['#weight'] = ($count - 1) * 3 + 2 + $i;
        }
        unset($keys);

        $ffp['form_path'] = array_merge($ffp['form_path'], $field['form']);
      }

      $ffp['form_path'][$name]['#weight'] = ($count - 1) * 3;

      // Set defualt value for patterns
      if (isset($field['settings']['value'])) {
        $ffp['form_path'][$name]['#default_value'] = $field['settings']['value'];

        if (isset($field['data'])) {
          foreach ($field['data'] as $key => $value) {
            $ffp['form_path'][$value]['#default_value'] = $field['settings'][$key];
          }
        }
      }

      // Replacement patterns for field
      $ffp['form_path'][$name .'_tokens'] = array(
        '#type' => 'fieldset',
        '#title' => t('!title replacement patterns', array('!title' => $field['title'])),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#description' => theme('token_help', 'field') . theme('token_help', 'node'),
        '#weight' => ($count - 1) * 3 + 1,
      );

      $ffp['form_path'][$name .'_cleanup'] = array(
        '#type' => 'fieldset',
        '#title' => t('!title cleanup settings', array('!title' => $field['title'])),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => ($count - 1) * 3 + 2
      );

      // Cleanup field with Pathauto module
      $ffp['form_path'][$name .'_cleanup'][$name .'_pathauto'] = array(
        '#type' => 'checkbox',
        '#title' => t('Cleanup using Pathauto') .'.',
        '#default_value' => isset($field['settings']['pathauto'])
          ? $field['settings']['pathauto']
          : 0
        ,
        '#description' => t('Cleanup !title using !url', array('!title' => $field['title'], '!url' => l(t('Pathauto settings'), 'admin/build/path/pathauto'))),
      );
      if (!module_exists('pathauto')) {
        $ffp['form_path'][$name .'_cleanup'][$name .'_pathauto']['#disabled'] = TRUE;
        $ffp['form_path'][$name .'_cleanup'][$name .'_pathauto']['#default_value'] = 0;
      }

      // Convert field to lower case
      $ffp['form_path'][$name .'_cleanup'][$name .'_tolower'] = array(
        '#type' => 'checkbox',
        '#title' => t('Convert to lower case') .'.',
        '#default_value' => isset($field['settings']['tolower'])
          ? $field['settings']['tolower']
          : 0
        ,
        '#description' => t('Convert !title to lower case', array('!title' => $field['title'])) .'.'
      );

      // Transliterate field with Transliteration module
      $ffp['form_path'][$name .'_cleanup'][$name .'_transliterate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Transliterate') .'.',
        '#default_value' => isset($field['settings']['transliterate'])
          ? $field['settings']['transliterate']
          : 0
        ,
        '#description' => t('Transliterate !title', array('!title' => $field['title'])) .'.'
      );
      if (!module_exists('transliteration')) {
        $ffp['form_path'][$name .'_cleanup'][$name .'_transliterate']['#disabled'] = TRUE;
        $ffp['form_path'][$name .'_cleanup'][$name .'_transliterate']['#default_value'] = 0;
      }

    }

    $form['#submit'][] = 'filefield_paths_form_submit';
  }
}

/**
 * Implementation of hook_form_submit().
 */
function filefield_paths_form_submit($form, &$form_state) {

  // Set variables for FileField.module
  if ($form_state['values']['form_id'] != 'node_type_form') {
    $ffp = array(
      'type' => $form_state['values']['type_name'],
      'name' => $form_state['values']['field_name']
    );
  }

  // Set variables for Upload.module
  else {
    $ffp = array(
      'type' => $form_state['values']['type'],
      'name' => 'upload'
    );
  }

  $fields = module_invoke_all('filefield_paths_field_settings');
  foreach ($fields as $name => &$field) {
    $field['settings'] = array(
      'value' => $form_state['values'][$name],
      'tolower' => $form_state['values'][$name .'_tolower'],
      'pathauto' => $form_state['values'][$name .'_pathauto'],
      'transliterate' => $form_state['values'][$name .'_transliterate']
    );

    if (isset($field['data'])) {
      foreach ($field['data'] as $key => $value) {
        $field['settings'][$key] = $form_state['values'][$value];
      }
    }

    $cols[] = $field['sql'];
    $vals[] = "'%s'";
    $data[] = serialize($field['settings']);
  }

  $result = db_fetch_object(
    db_query("SELECT * FROM {filefield_paths} WHERE type = '%s' AND field = '%s'", $ffp['type'], $ffp['name'])
  );

  if (!empty($result)) {
    foreach ($cols as &$col) {
      $col .= " = '%s'";
    }

    db_query(
      "UPDATE {filefield_paths} SET ". implode(', ', $cols) ." WHERE type = '%s' AND field = '%s'",
      array_merge($data, array($ffp['type'], $ffp['name']))
    );
  }

  else {
    db_query(
      "INSERT INTO {filefield_paths} (type, field, ". implode(', ', $cols) .") VALUES ('%s', '%s', ". implode(', ', $vals) .")",
      array_merge(array($ffp['type'], $ffp['name']), $data)
    );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function filefield_paths_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

  switch ($op) {
    case 'presave':
      $content_type = content_types($node->type);

      foreach ($content_type['fields'] as $field) {
        if (preg_match('/\bfilefield\b|\bimage\b/', $field['type']) && is_array($node->$field['field_name'])) {

          foreach ($node->$field['field_name'] as $count => &$file) {
            if (empty($file['filepath'])) {
              continue;
            }

            // If file is newly uploaded, flag to be processed
            if ($file['status'] == 0) {
              $file['data']['process'] = TRUE;
            }
          }

        }
      }
      break;

    case 'insert':
    case 'update':
      $update = FALSE;

      if (($ffp = filefield_paths_get_fields($node, $op)) == FALSE) {
        break;
      }

      // Process files
      foreach ($ffp['#files'] as &$file) {
        filefield_paths_process_file($file, $ffp['#settings'][$file['name']], $node, $update);
      }

      // Re-write node entry if required
      if ($update == TRUE) {
        drupal_write_record('node', $node, 'nid');
        if (!empty($node->revision)) {
          _node_save_revision($node, $user->uid);
          db_query('UPDATE {node} SET vid = %d WHERE nid = %d', $node->vid, $node->nid);
        }
        else {
          _node_save_revision($node, $user->uid, 'vid');
        }
      }

      // Cleanup temporary paths
      if ($ffp['#settings']) {
        foreach ($ffp['#settings'] as $field) {
          $paths = explode('/', $field['filepath']['value']);

          while ($paths) {
            if (@rmdir(file_directory_path() .'/'. implode('/', $paths)) === TRUE) {
              array_pop($paths);
              continue;
            }
            break;
          }
        }
      }

      break;
  }
}

function filefield_paths_get_fields($node, $op) {
  // Check for FileField.module files
  $content_type = content_types($node->type);
  $ffp = array();

  foreach ($content_type['fields'] as $field) {
    if (preg_match('/\bfilefield\b|\bimage\b/', $field['type']) && is_array($node->$field['field_name'])) {

      foreach ($node->$field['field_name'] as &$file) {
        if ((!empty($file['filepath']) && !empty($file['data']['process'])) || $op == 'load') {
          $ffp['#files'][] = array(
            'field' => &$file,
            'module' => $field['module'],
            'name' => $field['field_name']
          );

          $ffp['#types'][$field['field_name']] = TRUE;
        }
      }

    }
  }

  // Check for Upload.module files
  if (isset($node->files)) {
    foreach ($node->files as &$file) {
      if ($file['new'] == TRUE || $op == 'load') {
        $ffp['#files'][] = array(
          'field' => &$file,
          'module' => 'upload',
          'name' => 'upload'
        );

        $ffp['#types']['upload'] = TRUE;
      }
    }
  }

  if (count($ffp) == 0 || (isset($ffp['#types']) && !is_array($ffp['#types']))) {
    return FALSE;
  }

  $fields = module_invoke_all('filefield_paths_field_settings');

  // Load fields settings
  foreach ($ffp['#types'] as $name => $temp) {
    $result = db_fetch_object(
      db_query("SELECT * FROM {filefield_paths} WHERE type = '%s' AND field = '%s'", $node->type, $name)
    );

    if (!empty($result)) {
      foreach ($fields as $field) {
        $ffp['#settings'][$name][$field['sql']] = unserialize($result->$field['sql']);
      }
    }
  }

  return $ffp;
}

function filefield_paths_process_file(&$file, $settings, &$node, &$update) {

  // Process filepath
  $file['filepath']['old'] = $file['field']['filepath'];
  $file['filepath']['new'] = filefield_paths_process_string(file_directory_path() .'/'. $settings['filepath']['value'] .'/'. $file['field']['filename'], 'node', $node, $settings['filepath']);
  $file['filepath']['new'] = filefield_paths_process_string($file['filepath']['new'], 'field', array(0 => $file['field']), $settings['filepath']);

  // Process filename
  $file['filename']['old'] = $file['field']['filename'];
  if (($file['filename']['new'] = $settings['filename']['value']) != '') {
    $file['filename']['new'] = filefield_paths_process_string($file['filename']['new'], 'node', $node, $settings['filename']);
    $file['filename']['new'] = filefield_paths_process_string($file['filename']['new'], 'field', array(0 => $file['field']), $settings['filename']);
  }
  else {
    $file['filename']['new'] = $file['field']['filename'];
  }

  // Finalize files if necessary
  if (dirname($file['filepath']['new']) != dirname($file['field']['filepath']) || $file['filename']['new'] != $file['field']['filename']) {
    if (filefield_paths_file_move($file)) {

      // Fix reference to old paths in Body and Teaser
      // @TODO: allow for CCK fields
      $body = str_replace($file['filepath']['old'],  $file['filepath']['new'], $node->body);
      $teaser = str_replace($file['filepath']['old'],  $file['filepath']['new'], $node->teaser);

      if ($body != $node->body || $teaser != $node->teaser) {
        $node->body = $body;
        $node->teaser = $teaser;

        $update = TRUE;
      }

      // Move ImageField thumbnail
      if ($file['module'] == 'imagefield') {
        file_move(
          imagefield_file_admin_thumb_path(
            array('filepath' => $file['filepath']['old'])
          ),
          imagefield_file_admin_thumb_path($file['field']),
          FILE_EXISTS_RENAME
        );
      }

      // Store new filename in file Array
      $file['field']['filename'] = $file['filename']['new'];
    }
  }

  module_invoke_all('filefield_paths_process_file', $file, $settings, $node);
}

/**
 * Implementation of hook_token_list().
 */
function filefield_paths_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();
    $tokens['file']['filefield_paths-name'] = t("File name");
    $tokens['file']['filefield_paths-ext'] = t("File extension");
    return $tokens;
  }
}

/**
 * Implementation of hook_token_values().
 */
function filefield_paths_token_values($type, $object = NULL) {
  if ($type == 'field') {
    $item = pathinfo($object[0]['filename']);
    $tokens['filefield_paths-name'] = $item['filename'];
    $tokens['filefield_paths-ext'] = $item['extension'];
    return $tokens;
  }
}

/**
 * Process and cleanup strings.
 */
function filefield_paths_process_string($original, $type, $object, $settings) {

  // Process string tokens via Pathauto module
  if (module_exists('pathauto') && $settings['pathauto']) {
    $placeholders = _filefield_paths_get_placeholders($type, $object);
    $value = str_replace($placeholders['tokens'], $placeholders['values'], $original);
  }

  // Process string tokens via Token module
  else {
    $value = token_replace($original, $type, $object);
  }

  // Transliterate string
  if (module_exists('transliteration') && $settings['transliterate']) {
    $value = transliteration_get($value);
    if ($type == 'field') {
      $value = transliteration_clean_filename($value);
    }
  }

  // Convert string to lower case
  if ($settings['tolower'] || ($settings['pathauto'] && variable_get('pathauto_case', 0))) {
    // Convert string to lower case
    $value = drupal_strtolower($value);
  }

  return $value;
}

/**
 * Temporary workaround for http://drupal.org/node/324736
 * @TODO: Implement non-hacky fix.
 */
function _filefield_paths_get_placeholders($type, $object) {
  if (function_exists('token_get_values')) {
    $full = token_get_values($type, $object, TRUE);

    foreach ($full->values as &$value) {
      if (is_array($value)) {
        $value = $value[0];
      }
    }

    $tokens = token_prepare_tokens($full->tokens);
    $values = pathauto_clean_token_values($full);
    return array('tokens' => $tokens, 'values' => $values);
  }

  watchdog('Pathauto', 'It appears that you have installed Pathauto, which depends on Token, but Token is either not installed or not installed properly.');
  return array('tokens' => array(), 'values' => array());
}

/**
 * Move file and update its database record.
 */
function filefield_paths_file_move(&$file, $replace = FILE_EXISTS_RENAME) {
  $dest = field_file_strip_path(dirname($file['filepath']['new']));

  foreach (explode('/', $dest) as $dir) {
    $dirs[] = $dir;
    $path = file_create_path(implode($dirs, '/'));
    if (!field_file_check_directory($path, FILE_CREATE_DIRECTORY)) {
      watchdog('filefield_paths', 'FileField Paths failed to create directory (%d).', array('%d' => $path), WATCHDOG_ERROR);
      return FALSE;
    }
  }

  if (!file_move($file['field']['filepath'], $dest .'/'. $file['filename']['new'], $replace)) {
    watchdog('filefield_paths', 'FileField Paths failed to move file (%o) to (%n).', array('%o' => $file['filepath']['old'], '%n' => $dest .'/'. $file['filename']['new']), WATCHDOG_ERROR);
    return FALSE;
  }

  db_query('UPDATE {files} SET filename = "%s", filepath = "%s" WHERE fid = %d', $file['filename']['new'], $file['field']['filepath'], $file['field']['fid']);

  return TRUE;
}
