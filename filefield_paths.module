<?php
/**
 * @file
 * Contains core functions for the File (Field) Paths module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function filefield_paths_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'file') {
    $fields['origname'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Original name'))
      ->setDescription(t('Original name of the file with no path components. Used by the filefield_paths module.'));

    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function filefield_paths_form_field_ui_field_edit_form_alter(array &$form, FormStateInterface $form_state) {
  // Get the settings manager service to do all the work.
  $settings_manager = \Drupal::service('filefield_paths.settings_manager');

  $settings_manager->alterSettingsForm($form, $form_state);
}

/**
 * Implements hook_entity_insert().
 */
function filefield_paths_entity_insert(EntityInterface $entity) {
  filefield_paths_process_entity($entity);
}

/**
 * Implements hook_entity_update().
 */
function filefield_paths_entity_update(EntityInterface $entity) {
  filefield_paths_process_entity($entity);
}

/**
 * Process all the fields on a content entity, moving files as needed.
 *
 * @param EntityInterface $entity
 */
function filefield_paths_process_entity(EntityInterface $entity) {
  // We don't want to process config entities as they are not fieldable.
  if ($entity instanceof ContentEntityInterface) {

    // Get the manager service to do all the work.
    $manager = \Drupal::service('filefield_paths.manager');

    // Process all the fields on it.
    $manager->processContentEntity($entity);
  }
}

/**
 * Gathers a list of field types that are file entity based.
 *
 * @param bool $reset
 * @return array
 */
function _filefield_paths_get_field_types($reset = FALSE) {
  $file_field_types = &drupal_static(__FUNCTION__);

  if (empty($field_types) || $reset) {
    // Get a list of all field types available.
    $types = \Drupal::service('plugin.manager.field.field_type')->getDefinitions();

    // Build a list of the ones based on FileFieldItemList.
    $file_field_types = array();
    foreach ($types as $name => $type) {
      if ($type['list_class'] == '\Drupal\file\Plugin\Field\FieldType\FileFieldItemList') {
        $file_field_types[] = $name;
      }
    }
  }

  return $file_field_types;
}

/**
 * Submit callback for File (Field) Paths settings form.
 */
function filefield_paths_form_submit($form, &$form_state) {
  // TODO: Make retroactive updates work.
  /*
  // Retroactive updates.
  if ($form_state['values']['instance']['settings']['filefield_paths_enabled'] && $form_state['values']['instance']['settings']['filefield_paths']['retroactive_update']) {
    filefield_paths_batch_update($form_state['values']['instance']);
    batch_process($form_state['redirect']);
  }
  */
}

/**
 * Implements hook_file_presave().
 */
function filefield_paths_file_presave($file) {
  // @TODO: Original code kept for reference until it is absorbed.
  // Store original filename in the database.
  if (empty($file->origname) && isset($file->filename)) {
    $file->origname = $file->filename;
  }
}

// @TODO: Find a better place for the token related stuff.
// This was removed from token.inc as it was the last include file left that
// hadn't been absorbed into other parts. It was put here until a better place
// is found.

/**
 * Implements hook_token_info().
 */
function filefield_paths_token_info() {
  $info['tokens']['file']['ffp-name-only'] = array(
    'name' => t("File name"),
    'description' => t("File name without extension."),
  );
  $info['tokens']['file']['ffp-name-only-original'] = array(
    'name' => t("File name - original"),
    'description' => t("File name without extension - original."),
  );
  $info['tokens']['file']['ffp-extension-original'] = array(
    'name' => t("File extension - original"),
    'description' => t("File extension - original."),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function filefield_paths_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $url_options = array('absolute' => TRUE);
  if (isset($language)) {
    $url_options['language'] = $language;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'file' && !empty($data['file'])) {
    $file = $data['file'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'ffp-name-only':
          $info = pathinfo($file->filename);
          $replacements[$original] = $info['filename'];
          break;

        case 'ffp-name-only-original':
          $info = pathinfo($file->origname);
          $replacements[$original] = $info['filename'];
          break;

        case 'ffp-extension-original':
          $info = pathinfo($file->origname);
          $replacements[$original] = isset($info['extension']) ? $info['extension'] : NULL;
          break;
      }
    }
  }

  return $replacements;
}
